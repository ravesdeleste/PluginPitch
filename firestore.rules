rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if request contains valid session token
    function hasValidSession() {
      return request.headers["authorization"] != null &&
             request.headers["authorization"].size() > 0;
    }

    // ============= USERS COLLECTION =============
    // Users can only create/read their own document
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId &&
                       request.resource.data.keys().hasAll(['email', 'name', 'createdAt']);
      allow update, delete: if false; // Users cannot modify their own data
    }

    // ============= SESSIONS COLLECTION =============
    // Store active sessions for authentication
    match /sessions/{sessionId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId &&
                       request.resource.data.keys().hasAll(['userId', 'token', 'type', 'createdAt', 'expiresAt']);
      allow delete: if request.auth.uid == resource.data.userId;
      allow update, write: if false;
    }

    // ============= PROJECTS COLLECTION =============
    // Public read access (all users can see projects)
    // Only admin (with custom token) can write/modify
    match /projects/{projectId} {
      allow read: if true;
      allow create, update, delete: if request.auth.token.get('isAdmin') == true &&
                                        request.auth.token.get('adminKey') != null;
    }

    // ============= VOTES COLLECTION =============
    // Users can only vote once, votes are semi-public (counted but not identified)
    match /votes/{voteId} {
      // Only vote creator can read their own vote
      allow read: if request.auth.uid == resource.data.userId ||
                     request.auth.token.get('isAdmin') == true;

      // Users can create a vote (one per day validation in client)
      allow create: if request.auth.uid == request.resource.data.userId &&
                       request.resource.data.keys().hasAll(['projectId', 'userId', 'weight', 'timestamp']);

      // No updates or deletes allowed on votes
      allow update, delete: if false;
    }

    // ============= RESULTS COLLECTION =============
    // Only admin can declare winners
    match /results/{document=**} {
      allow read: if true; // Everyone can see results
      allow write: if request.auth.token.get('isAdmin') == true &&
                      request.auth.token.get('adminKey') != null;
    }

    // ============= DEFAULT DENY =============
    // All other collections are denied by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
DEPLOYMENT INSTRUCTIONS:

1. Go to Firebase Console: https://console.firebase.google.com
2. Select your "plugin-pitch" project
3. Navigate to Firestore Database > Rules
4. Replace the rules with the content above
5. Publish the rules

IMPLEMENTATION NOTES:

- This ruleset uses custom claims in Firebase Auth tokens
- You'll need to create a backend function to:
  1. Verify admin/jury credentials
  2. Create custom tokens with appropriate claims
  3. Set isAdmin and adminKey in token claims

- For now, you'll need to enable Firestore Anonymous Authentication
  and validate admin access in the app layer

- Consider implementing Cloud Functions for:
  1. Admin authentication and token generation
  2. Vote deduplication per user per day
  3. Device/IP fingerprinting to prevent fraud
*/
